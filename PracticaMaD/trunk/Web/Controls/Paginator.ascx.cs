using System;
using System.Web.UI.WebControls;

namespace Es.Udc.DotNet.PracticaMaD.Web.Pages.Controls
{
    /// <summary>
    /// <para>
    /// Pagination control for a paginated view.
    /// </para>
    /// <example>You have to declare the tag in an aspx page:
    /// <code>
    /// &lt;%@ Register TagPrefix="uc" TagName="Paginator" 
    /// Src="~/Controls/Paginator.ascx" %&gt;
    /// </code>
    /// Then use it where you need it:
    /// <code>
    /// &lt;uc:Paginator ID="Paginator" runat="server"
    /// NavigateUrl="~/Pages/Example.aspx"&gt;&lt;/uc:Paginator&gt;
    /// </code>
    /// Now you have the Paginator available in the aspx.cs for doing something like this:
    /// <code>
    /// private void PopulateExampleList()
    /// {
    ///     // paginator
    ///     Paginator.ItemCount = ExampleService.GetItemCount();
    ///     Paginator.ItemsPerPage = ExampleSettings.ItemsPerPage;
    ///     Paginator.UpdateView();
    /// 
    ///     // group list
    ///     ExampleRepeater.DataSource = ExampleService.GetPaging(
    ///         Paginator.StartIndex, Paginator.ItemsPerPage);
    ///     ExampleRepeater.DataBind();
    /// }
    /// </code>
    /// The links generated by this example are like this <c>~/Pages/Example.aspx?page=1</c>
    /// and the current page number is obtained from the query string (one if not specified).
    /// </example>
    /// </summary>
    public partial class Paginator : System.Web.UI.UserControl
    {
        private const int NullPageNumber = -1;

        /// <summary>
        /// The items per page
        /// </summary>
        private int _itemsPerPage = 10;
        /// <summary>
        /// Gets or sets the items per page.
        /// </summary>
        /// <value>
        /// The items per page.
        /// </value>
        /// <exception cref="System.ArgumentException">If <c>value</c> &lt; 1</exception>
        public int ItemsPerPage
        {
            get { return _itemsPerPage; }
            set
            {
                if (value < 1) throw new ArgumentException();
                _itemsPerPage = value;
                _currentPage = _lastPage = NullPageNumber;
            }
        }

        /// <summary>
        /// The item count
        /// </summary>
        private int _itemCount = 0;
        /// <summary>
        /// Gets or sets the item count.
        /// </summary>
        /// <value>
        /// The item count.
        /// </value>
        /// <exception cref="System.ArgumentException">If <c>value</c> &lt; 0</exception>
        public int ItemCount
        {
            get { return _itemCount; }
            set
            {
                if (value < 0) throw new ArgumentException();
                _itemCount = value;
                _currentPage = _lastPage = NullPageNumber;
            }
        }

        /// <summary>
        /// The current page number
        /// </summary>
        private int _currentPage = NullPageNumber;
        /// <summary>
        /// Gets the current page number.
        /// </summary>
        /// <value>
        /// The current page number.
        /// </value>
        public int CurrentPage
        {
            get
            {
                if (_currentPage == NullPageNumber)
                {
                    try
                    {
                        _currentPage = Int32.Parse(Request.QueryString["page"]);
                        if (_currentPage > LastPage)
                        {
                            _currentPage = LastPage;
                        }
                        else if (_currentPage < 1)
                        {
                            _currentPage = 1;
                        }
                    }
                    catch (Exception)
                    {
                        _currentPage = 1;
                    }
                }

                return _currentPage;
            }
        }

        /// <summary>
        /// The last page number
        /// </summary>
        private int _lastPage = NullPageNumber;
        /// <summary>
        /// Gets the last page number.
        /// </summary>
        /// <value>
        /// The last page number.
        /// </value>
        public int LastPage
        {
            get
            {
                if (_lastPage == NullPageNumber)
                {
                    float count = (float)ItemCount;
                    float perPage = (float)ItemsPerPage;
                    _lastPage = (int)Math.Ceiling(count / perPage);
                }
                return _lastPage;
            }
        }

        /// <summary>
        /// Gets the start index for a paging query.
        /// </summary>
        /// <value>
        /// The start index for a paging query.
        /// </value>
        public int StartIndex
        {
            get
            {
                return (CurrentPage - 1)*ItemsPerPage;
            }
        }

        /// <summary>
        /// The paging URL without the page number, must be added at the end
        /// </summary>
        private String _pagingUrl;
        /// <summary>
        /// The URL of the page without the paging parameters
        /// </summary>
        private String _navigateUrl;
        /// <summary>
        /// Gets or sets the URL of the page without the paging parameters.
        /// </summary>
        /// <value>
        /// The URL of the page without the paging parameters.
        /// </value>
        public String NavigateUrl
        {
            get
            {
                return _navigateUrl;
            }
            set
            {
                String pagingUrl = value;
                pagingUrl += (value.Contains("?")) ? "&" : "?";
                pagingUrl += "page=";
                _pagingUrl = pagingUrl;
                _navigateUrl = value;
            }
        }

        /// <summary>
        /// Handles the Load event of the Page control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        protected void Page_Load(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// Updates the view.
        /// </summary>
        public void UpdateView()
        {
            // only one page, hide this
            if (LastPage < 2)
            {
                Visible = false;
                return;
            }
            Visible = true;

            // current page link
            SetUrl(Middle3Td, Middle3Link, CurrentPage);

            // previous page links (first, current - 2, current - 1)
            if (CurrentPage > 1)
            {
                SetUrl(PrevTd, PrevLink, CurrentPage - 1);
                SetUrl(Middle2Td, Middle2Link, CurrentPage - 1);

                if (CurrentPage > 2)
                {
                    SetUrl(Middle1Td, Middle1Link, CurrentPage - 2);

                    if (CurrentPage > 3)
                    {
                        SetUrl(FirstTd, FirstLink, 1);
                        SpaceFirstTd.Visible = (CurrentPage > 4);
                    }
                }
            }

            // next page links (current + 1, current + 2, last)
            var toLast = LastPage - CurrentPage;
            if (toLast > 0)
            {
                SetUrl(Middle4Td, Middle4Link, CurrentPage + 1);
                SetUrl(NextTd, NextLink, CurrentPage + 1);

                if (toLast > 1)
                {
                    SetUrl(Middle5Td, Middle5Link, CurrentPage + 2);

                    if (toLast > 2)
                    {
                        SetUrl(LastTd, LastLink, LastPage);
                        SpaceLastTd.Visible = (toLast > 3);
                    }
                }
            }
        }

        /// <summary>
        /// Sets the URL of a link and makes its container visible.
        /// </summary>
        /// <param name="container">The container.</param>
        /// <param name="link">The link.</param>
        /// <param name="page">The page number.</param>
        private void SetUrl(WebControl container, HyperLink link, int page)
        {
            container.Visible = true;
            link.NavigateUrl = _pagingUrl + page.ToString();
            if (String.IsNullOrEmpty(link.Text))
            {
                link.Text = page.ToString();
            }
        }
    }
}